---

- name: Initialize operator found fact
  ansible.builtin.set_fact:
    olm_operator_found: true

- name: Assert all required fields are present
  ansible.builtin.assert:
    that:
      - operator | string
      - namespace | string
      - source | string

- name: Check CatalogSource is Ready
  kubernetes.core.k8s_info:
    api: operators.coreos.com/v1alpha1
    kind: CatalogSource
    name: "{{ source }}"
    namespace: "{{ source_ns }}"
  register: source_status
  until:
    - source_status | json_query('resources[0].status.connectionState.lastObservedState') == 'READY'
  retries: 60
  delay: 10

- name: Create Namespace for OLM operator
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ namespace }}"
        labels: "{{ ns_labels | default(omit) }}"

- name: Labeling namespace to cover PodSecurity requirements
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ namespace }}"
        labels:
          pod-security.kubernetes.io/enforce: privileged
          pod-security.kubernetes.io/enforce-version: latest
          security.openshift.io/scc.podSecurityLabelSync: "false"

- name: Get operator's package manifests
  kubernetes.core.k8s_info:
    api_version: packages.operators.coreos.com/v1
    kind: PackageManifest
    label_selectors:
      - catalog={{ source }}
      - catalog-namespace={{ source_ns }}
    field_selectors:
      - metadata.name={{ operator }}
  register: operator_packagemanifest
  retries: 3
  delay: 5
  until:
    - operator_packagemanifest is defined
    - operator_packagemanifest.resources is defined
    - operator_packagemanifest.resources | length
  ignore_errors: true
  no_log: true

- name: Set package as not found
  ansible.builtin.set_fact:
    olm_operator_found: false
  when: operator_packagemanifest is skipped
    or operator_packagemanifest.resources is undefined
    or operator_packagemanifest.resources | length != 1

- name: Fail if not found and nor skippable
  ansible.builtin.fail:
    msg: >
      The operator {{ operator }} is not found in the catalog
      and skippable is {{ olm_operator_skippable }}.
  when:
    - not olm_operator_skippable
    - not olm_operator_found

- name: "Installing Operator {{ operator }}"
  vars:
    default_channel: "{{ operator_packagemanifest.resources[0].status.defaultChannel }}"
    desired_channel: "{{ channel if channel is defined and channel |
                          length > 0 else default_channel }}"
    default_csv: >-
      {{
        operator_packagemanifest.resources[0].status.channels
        | selectattr('name', 'equalto', desired_channel)
        | map(attribute='currentCSV')
        | first
      }}
    operator_csv: "{{ starting_csv | default(default_csv, true) }}"
  when:
    - olm_operator_found | bool
  block:
    - name: Print install parameters
      ansible.builtin.debug:
        msg:
          - "Operator: {{ operator }}"
          - "Target namespace: {{ namespace }}"
          - "Catalog: {{ source }}"
          - "Channel: {{ desired_channel }}"
          - "CSV: {{ operator_csv }}"

    - name: Create OperatorGroup for OLM operator
      vars:
        all_namespaces: "{{ operator_packagemanifest |
          json_query('resources[*].status.channels[0].currentCSVDesc.installModes[3].supported') |
          first }}"
        group_spec: "{{  {'targetNamespaces': []} if all_namespaces |
                     default(false) else {'targetNamespaces': [namespace]} }}"
      kubernetes.core.k8s:
        definition:
          apiVersion: operators.coreos.com/v1
          kind: OperatorGroup
          metadata:
            name: "{{ operator_group_name }}"
            namespace: "{{ namespace }}"
          spec: "{{ operator_group_spec | default(group_spec, true) }}"

    - name: Create subscription for OLM operator
      kubernetes.core.k8s:
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: "{{ operator }}"
            namespace: "{{ namespace }}"
          spec:
            channel: "{{ desired_channel }}"
            installPlanApproval: "{{ (starting_csv | default('') | length) | ternary('Manual', 'Automatic') }}"
            config:
              resources: {}
            name: "{{ operator }}"
            source: "{{ source }}"
            sourceNamespace: "{{ source_ns }}"
            startingCSV: "{{ operator_csv }}"

    - name: Check for install plans
      kubernetes.core.k8s_info:
        api: operators.coreos.com/v1alpha1
        kind: InstallPlan
        namespace: "{{ namespace }}"
      register: _oo_install_plans
      no_log: true
      retries: 18
      delay: 10
      until:
        - _oo_install_plans.resources is defined
        - _oo_install_plans.resources | length

    - name: Approve only the install plan for the specific CSV
      vars:
        query: "resources[? spec.approved == `false` && contains(spec.clusterServiceVersionNames, '{{ starting_csv }}')]"
      kubernetes.core.k8s:
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: InstallPlan
          metadata:
            name: "{{ install_plan.metadata.name }}"
            namespace: "{{ namespace }}"
          spec:
            approved: true
      loop: "{{ _oo_install_plans | json_query(query) | default([]) }}"
      loop_control:
        loop_var: install_plan
      when:
        - starting_csv | default('') | length > 0

    - name: Wait for CSV to be ready
      kubernetes.core.k8s_info:
        api: operators.coreos.com/v1alpha1
        namespace: "{{ namespace }}"
        kind: ClusterServiceVersion
        name: "{{ operator_csv }}"
      register: csv
      retries: 20
      delay: 30
      until:
        - csv.resources is defined
        - csv.resources | length == 1
        - "'status' in csv.resources[0]"
        - "'phase' in csv.resources[0].status"
        - csv.resources[0].status.phase == 'Succeeded' or
          csv.resources[0].status.phase == 'Present'
      no_log: true

    - name: Fail if not all pods reach a successful state
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ namespace }}"
      register: olm_pod
      retries: 30
      delay: 20
      until:
        olm_pod.resources | map(attribute='status.phase') | difference(['Succeeded', 'Running']) | length == 0
      no_log: true

    - name: Patch subscription according to install_approval
      kubernetes.core.k8s:
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: "{{ operator }}"
            namespace: "{{ namespace }}"
          spec:
            installPlanApproval: "{{ install_approval | default('Manual') }}"
            channel: "{{ desired_channel }}"
            startingCSV: "{{ operator_csv }}"
            config:
              resources: {}
            name: "{{ operator }}"
            source: "{{ source }}"
            sourceNamespace: "{{ source_ns }}"
      no_log: true

  rescue:
    - name: Catalog sources information
      kubernetes.core.k8s_info:
        api: operators.coreos.com/v1alpha1
        kind: CatalogSource
      register: catalog_info
      no_log: true

    - name: Subscriptions information
      kubernetes.core.k8s_info:
        api: operators.coreos.com/v1alpha1
        kind: Subscription
        namespace: "{{ namespace }}"
      register: subs_info
      no_log: true

    - name: Install plan information
      kubernetes.core.k8s_info:
        api: operators.coreos.com/v1alpha1
        kind: InstallPlan
        namespace: "{{ namespace }}"
      register: ip_info
      no_log: true

    - name: Print catalog information
      ansible.builtin.debug:
        msg: "{{ catalog_info.resources }}"

    - name: Print Subscription information
      ansible.builtin.debug:
        msg: "{{ subs_info.resources }}"

    - name: Print InstallPlan information
      ansible.builtin.debug:
        msg: "{{ ip_info.resources }}"

    - name: Issues during {{ operator }} operator installation
      ansible.builtin.fail:
        msg: >
          There where issues during the operator deployment. See debug info in
          the above tasks

...
